// Starting at EL3, because el3 registers are only accessible from EL3
0x0000: mov x0, #0x40000000
0x0004: str wzr, [x0]
0x0008: mov w1, #0x80000000      @ *(int*)0x40000000 = 0
0x000c: str w1, [x0, #8]         @ *(int*)0x40000008 = 0x80000000
0x0010: ldr x0, <bytecode+0x90>  @ x0 = 0x0124f800
0x0014: msr cntfrq_el0, x0       @ Counter-timer Frequency register = 0x0124f800 = 19200000
0x0018: msr cntvoff_el2, xzr     @ Counter-timer Virtual Offset register = 0
0x001c: mov x0, #0x33ff          @ x0 = 0x33ff
0x0020: msr cptr_el3, x0         @ cptr_el3 = 0x33ff  TRAP REGISTER
0x0024: mov x0, #0x5b1           @ 
0x0028: msr scr_el3, x0          @ scr_el3 = 0x5b1 Secure Configuration Register 
                                 @ [0] NS  - 1 - EL0 and EL1 are in Non-secure state, memory accesses from those exception levels cannot access Secure memory.
                                 @ [1] IRQ - 0 - Physical IRQ Routing: Physical IRQ while executing at exception levels other than EL3 are not taken in EL3
                                 @ [2] FIQ - 0 - Physical FIQ Routing: Physical FIQ while executing at all exception levels are taken in EL3.
                                 @ [3] EA  - 0 - External Abort and SError interrupt Routing: External Aborts and SError Interrupts at exception levels other than EL3 are not taken in EL3.
                                 @ [5:4] RES1
                                 @ [6] RES0
                                 @ [7] SMD - 1 - SMC instruction disable: SMC instris undefined at all exception levels. At EL1 Non-secure state, the HCR_EL2.TSC bit has priority over this control.
                                 @ [8] HCE - 1 - Hyp Call enable. This bit enables the use of HVC instructions: The HVC instruction is enabled at EL1, EL2 or EL3.
                                 @ [9] SIF - 0 - Secure Instruction Fetch: Secure state instruction fetches from Non-secure memory are permitted
                                 @ [10] RW - 1 - Register width control for lower exception levels: The next lower level is AArch64.
                                 @ [11] ST - 0 - Secure EL1 access to CNTPS_TVAL_EL1, CNTS_CTL_EL1, and CNTPS_CVAL_EL1: Registers accessible only in EL3. This is the reset value.
                                 @ [12] TWI- 0 - Traps WFI instructions: WFI instructions are not trapped.

0x002c: mov x0, #0x40            @ x0 = 0x40     
0x0030: msr s3_1_c15_c2_1, x0    @ CPU Extended Control Register, EL1 = 0x40 Disable the retention circuit. Enables data coherency with other cores in the cluster.
0x0034: ldr x0, <bytecode+0x98>  @ x0 = 0x30c50830
0x0038: msr sctlr_el2, x0        @ sctlr_el2 = 0x30c50830 System Control Register, EL2: 
                                 @ [0] - M - 0 - Global enable for the EL2 MMU: Disables EL2 MMU.
                                 @ [1] - A - 0 - Disables alignment fault checking
                                 @ [2] - C - 0 - Disables data and unified caches
                                 @ [3] - SA- 0 - Disables stack alignment check.
                                 @ [5:4] - RES1
                                 @ [10:6] - RES0
                                 @ [11] - RES1
                                 @ [12] - I - 0 - Instruction cache disabled
0x003c: mov x0, #0x3c9           @ spsr_el3 = 0x3c9
0x0040: msr spsr_el3, x0         @ spsr mode - el3 stack el3
                                 @ [0:3] - AArch64 Exception level and selected SP:0b1001 "EL2h", that means EL2 / SP_EL2
                                 @ [4]   - PSTATE.nRW
                                 @ [6]   - FIQ int mask.
                                 @ [7]   - IRQ int mask.
                                 @ [8]   - SError int mask.
                                 @ [9]   - Debug exception mask
                                 @ 
0x0044: adr x0, 0x8b870 <bytecode+80> 
0x0048: msr elr_el3, x0          @ return to 0x80 after exception
0x004c: eret                     @ take exception

0x0050: mrs x6, mpidr_el1
0x0054: and x6, x6, #0x3
0x0058: cbz x6, 0x8b894 <bytecode+0x74>
0x005c: adr x5, 0x8b8f8 <mbox+40>
0x0060: wfe
0x0064: ldr x4, [x5, x6, lsl #3]
0x0068: cbz x4, 0x8b880 <bytecode+0x60>
0x006c: mov x0, #0x0                    // #0
0x0070: b 0x8b89c <bytecode+0x7c>
0x0074: ldr w4, 0x8b91c <mbox+0x4c>
0x0078: ldr w0, 0x8b918 <mbox+0x48>
0x007c: mov x1, #0x0                    // #0
0x0080: mov x2, #0x0                    // #0
0x0084: mov x3, #0x0                    // #0
0x0088: br  x4
0x008c: 0x00000000
0x0090: 0x0124f800
0x0094: 0x00000000
0x0098: 0x30c50830
0x009c: 0x00000000

