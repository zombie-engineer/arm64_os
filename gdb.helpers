define ch_intsts
  set $ch_int_reg = 0x3f980508 + $arg0 * 32
  set $ch_int_val = *(int *)$ch_int_reg
  printf "channel %d: int: %08x: %08x", $arg0, $ch_int_reg, $ch_int_val
  if $ch_int_val & (1<<0)
    printf ",XFER_COMPLETE"
  end
  if $ch_int_val & (1<<1)
    printf ",HALT"
  end
  if $ch_int_val & (1<<2)
    printf ",AHBERR"
  end
  if $ch_int_val & (1<<3)
    printf ",STALL"
  end
  if $ch_int_val & (1<<4)
    printf ",NAK"
  end
  if $ch_int_val & (1<<5)
    printf ",ACK"
  end
  if $ch_int_val & (1<<6)
    printf ",NYET"
  end
  if $ch_int_val & (1<<7)
    printf ",TRNSERR"
  end
  if $ch_int_val & (1<<8)
    printf ",BABLE"
  end
  if $ch_int_val & (1<<9)
    printf ",FROVERR"
  end
  if $ch_int_val & (1<<10)
    printf ",DATTOGGLERR"
  end
  if $ch_int_val & (1<<11)
    printf ",BUFNOT"
  end
  if $ch_int_val & (1<<12)
    printf ",EXCESS"
  end
  if $ch_int_val & (1<<13)
    printf ",FLISTROLL"
  end
  printf "\n"
end

ch_intsts 0

define pspi
  set $_cs = *(int*)0x3f204000
  printf "spi: cs: %08x ", $_cs
  if $_cs & (1<<7)
    printf " TA"
  end
  if $_cs & (1<<8)
    printf " DMA-YES"
  else
    printf " DMA-NO"
  end
  if $_cs & (1<<11)
    printf " ADCS"
  end
  if $_cs & (1<<16)
    printf " DONE"
  end
  if $_cs & (1<<17)
    printf " RX-HAS-DATA"
  end
  if $_cs & (1<<18)
    printf " TX-RDY"
  end
  
  printf "\n"
end

define pdma
  set $_chan = $arg0
  set $_cs_addr = (int*)(0x3f007000 + $_chan * 0x100)
  set $_cs = *$_cs_addr
  set $_cb_addr = (int*)(0x3f007000 + $_chan * 0x100 + 4)
  set $_cb = *$_cb_addr
  set $_ena = *(int*)(0x3f007ff0) & (1<<$_chan) ? 1 : 0
  printf "dma: cs: 0x%08x: %08x cb: 0x%08x: %08x ena:%d", $_cs_addr, $_cs, $_cb_addr, $_cb, $_ena
  if $_cs & (1<<0)
    printf " ACTIVE"
  end
  if $_cs & (1<<1)
    printf " END"
  end
  if $_cs & (1<<2)
    printf " INT"
  end
  if $_cs & (1<<3)
    printf " DREQ"
  end
  if $_cs & (1<<4)
    printf " PAUS"
  end
  if $_cs & (1<<5)
    printf " DREQ_STOPS_DMA"
  end
  if $_cs & (1<<6)
    printf " WAIT_4_WRI"
  end
  if $_cs & (1<<8)
    printf " ERR"
  end
  printf "\n"
end

define pdmacb
  set $__cb = $arg0
  printf "cb: 0x%08x(src:0x%08x->dst:0x%08x,len:%06d)->0x%08x\n", $__cb, $__cb->src_addr, $__cb->dst_addr, $__cb->transfer_length, $__cb->dma_cb_next
end
define pdma_chain
  set $_cb = $arg0
  while $_cb
    pdmacb $_cb
    set $_cb = (struct dma_control_block *)($_cb->dma_cb_next & 0x3fffffff)
  end
end

define pspi_dma
  pspi
  pdma 0
  pdma 1
end

pspi_dma

pdma_chain cb
